from typing import Optional

import disnake


class Confirm(disnake.ui.View):
    """
    –ö–ª–∞—Å—Å –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é 2 –∫–Ω–æ–ø–∫–∏: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –æ—Ç–º–µ–Ω–∏—Ç—å.
    """

    def __init__(self):
        super().__init__(timeout=300)
        self.res: Optional[str] = None
        self.inter: Optional[disnake.ApplicationCommandInteraction] = None

    @disnake.ui.button(label='–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É', style=disnake.ButtonStyle.green)
    async def confirm(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        self.res = 'search'
        self.inter = inter
        self.stop()

    @disnake.ui.button(label='–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É', style=disnake.ButtonStyle.green)
    async def cancel(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        self.res = 'new_game'
        self.inter = inter
        self.stop()


class Back(disnake.ui.View):
    """
    –ö–ª–∞—Å—Å –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é 1 –∫–Ω–æ–ø–∫—É - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É.

    :attribute res: –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    def __init__(self):
        super().__init__(timeout=300)
        self.res: Optional[str] = None
        self.inter: Optional[disnake.ApplicationCommandInteraction] = None

    @disnake.ui.button(label='‚è´', style=disnake.ButtonStyle.green)
    async def back(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        self.res = 'r'
        await inter.response.defer()
        self.stop()


class Flipping(disnake.ui.View):
    """
    –ö–ª–∞—Å—Å –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é 2 –∫–Ω–æ–ø–∫–∏: –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–∑–∞–¥.

    :param mx: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    :param current: –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :attribute value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """

    def __init__(self, mx, current=0):
        super().__init__(timeout=300)
        self.current = current
        self.value: Optional[int] = None
        self.mx = mx - 1

    def stop(self):
        self.value = self.current if self.value is None else self.value
        super().stop()

    @disnake.ui.button(label='‚¨ÖÔ∏è', style=disnake.ButtonStyle.grey)
    async def left(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        if self.current < 1:
            self.value = self.mx
        else:
            self.value = self.current - 1

        await inter.response.defer()
        self.stop()

    @disnake.ui.button(label='‚û°Ô∏è', style=disnake.ButtonStyle.grey)
    async def right(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        if self.current >= self.mx:
            self.value = 0
        else:
            self.value = self.current + 1

        await inter.response.defer()
        self.stop()


class GameList(Flipping):
    """
    –ö–ª–∞—Å—Å –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é 5 –∫–Ω–æ–ø–∫–∏: –≤–ø–µ—Ä—ë–¥, –Ω–∞–∑–∞–¥, –æ—Ü–µ–Ω–∏—Ç—å, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Å–∫–∞—á–∞—Ç—å.

    :param mx: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    :param value: –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :attribute value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :attribute res: –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :attribute inter: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    def __init__(self, mx, value=0):
        super().__init__(mx, value)
        self.res: Optional[str] = None
        self.inter: Optional[disnake.ApplicationCommandInteraction] = None

    @disnake.ui.button(label='üî¢', style=disnake.ButtonStyle.green)
    async def vote(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        self.res = 'vote'
        self.inter = inter
        self.stop()

    @disnake.ui.button(label='üìä', style=disnake.ButtonStyle.green)
    async def comments(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        self.res = 'comments'
        self.inter = inter
        self.stop()

    @disnake.ui.button(label='‚è¨', style=disnake.ButtonStyle.green)
    async def versions(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        self.res = 'versions'
        self.inter = inter
        self.stop()


class FlippingBack(Flipping):
    """
    –ö–ª–∞—Å—Å –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é 3 –∫–Ω–æ–ø–∫–∏: –≤–ø–µ—Ä—ë–¥, –Ω–∞–∑–∞–¥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É.

    :param mx: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    :param value: –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :attribute value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :attribute res: –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    def __init__(self, mx, value=0):
        super().__init__(mx, value)
        self.res: Optional[str] = None

    @disnake.ui.button(label='‚è´', style=disnake.ButtonStyle.green)
    async def back(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        self.res = 'back'
        await inter.response.defer()
        self.stop()


class FlippingBackDownload(FlippingBack):
    """
    –ö–ª–∞—Å—Å –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é 4 –∫–Ω–æ–ø–∫–∏: –≤–ø–µ—Ä—ë–¥, –Ω–∞–∑–∞–¥, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –∏ —Å–∫–∞—á–∞—Ç—å.

    :param mx: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    :param value: –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :attribute value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :attribute res: –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    def __init__(self, mx, value=0):
        super().__init__(mx, value)

    @disnake.ui.button(label='‚è¨', style=disnake.ButtonStyle.green)
    async def download(self, button: disnake.ui.Button, inter: disnake.ApplicationCommandInteraction):
        self.res = 'download'
        await inter.response.defer()
        self.stop()
